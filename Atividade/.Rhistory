install.packages(streamgraph)
install.packages("streamgraph")
install.packages("devtools")
install.packages("streamgraph")
devtools::install_github("hrbrmstr/streamgraph")
remove.packages("streamgraph")
remove.packages("devtools")
#CONFIGURANDO ÁREA DE TRABALHO E INCLUSÃO DE BIBLIOTECAS
setwd("~/GitHub/AnaliseDosProjetosScratch_Empirica/Atividade")
#IMPORTANTO BASE DE DADOS
table_csv <- read.delim("new_Data.csv")
#FUNÇÕES AUXILIARES
cohens_d <- function(x, y) {
lx <- length(x)- 1
ly <- length(y)- 1
md  <- abs(mean(x) - mean(y))
csd <- lx * var(x) + ly * var(y)
csd <- csd/(lx + ly)
csd <- sqrt(csd)
cd  <- md/csd
}
#TRATANDO OS DADOS
table_csv <- table_csv[!is.na(table_csv$Abstraction)
& !is.na(table_csv$Parallelism)
& !is.na(table_csv$Logic)
& !is.na(table_csv$Synchronization)
& !is.na(table_csv$FlowControl)
& !is.na(table_csv$UserInteractivity)
& !is.na(table_csv$DataRepresentation)
& !is.na(table_csv$Mastery)
& table_csv$username!='unknown',]
#CONFIGURANDO ÁREA DE TRABALHO E INCLUSÃO DE BIBLIOTECAS
setwd("~/GitHub/AnaliseDosProjetosScratch_Empirica/Atividade")
#IMPORTANTO BASE DE DADOS
table_csv <- read.delim("new_Data.csv")
#FUNÇÕES AUXILIARES
cohens_d <- function(x, y) {
lx <- length(x)- 1
ly <- length(y)- 1
md  <- abs(mean(x) - mean(y))
csd <- lx * var(x) + ly * var(y)
csd <- csd/(lx + ly)
csd <- sqrt(csd)
cd  <- md/csd
}
#TRATANDO OS DADOS
table_csv <- table_csv[!is.na(table_csv$Abstraction)
& !is.na(table_csv$Parallelism)
& !is.na(table_csv$Logic)
& !is.na(table_csv$Synchronization)
& !is.na(table_csv$FlowControl)
& !is.na(table_csv$UserInteractivity)
& !is.na(table_csv$DataRepresentation)
& !is.na(table_csv$Mastery)
& table_csv$username!='unknown',]
#CALCULANDO MÉDIA DE VIEWS DOS PROJETOS
mediana_Views = median(table_csv$totalVies, na.rm = TRUE)
mediana_Love = median(table_csv$totalLoves, na.rm = TRUE)
#SELEÇÃO DOS PROJETOS ABAIXO E ACIMA DA MEDIANA
#seleção em TOTAL VIEWS
butt_Views <- table_csv[which(table_csv$totalVies <= mediana_Views),]
top_Views <- table_csv[which(table_csv$totalVies > mediana_Views),]
#seleção em TOTAL LOVES
butt_Loves <-table_csv[which(butt_Views$totalLoves <= mediana_Love),]
top_Loves <- table_csv[which(top_Views$totalLoves > mediana_Love),]
#CONFIGURANDO ÁREA DE TRABALHO E INCLUSÃO DE BIBLIOTECAS
setwd("~/GitHub/AnaliseDosProjetosScratch_Empirica/Atividade")
#IMPORTANTO BASE DE DADOS
table_csv <- read.delim("new_Data.csv")
#FUNÇÕES AUXILIARES
cohens_d <- function(x, y) {
lx <- length(x)- 1
ly <- length(y)- 1
md  <- abs(mean(x) - mean(y))
csd <- lx * var(x) + ly * var(y)
csd <- csd/(lx + ly)
csd <- sqrt(csd)
cd  <- md/csd
}
#TRATANDO OS DADOS
table_csv <- table_csv[!is.na(table_csv$Abstraction)
& !is.na(table_csv$Parallelism)
& !is.na(table_csv$Logic)
& !is.na(table_csv$Synchronization)
& !is.na(table_csv$FlowControl)
& !is.na(table_csv$UserInteractivity)
& !is.na(table_csv$DataRepresentation)
& !is.na(table_csv$Mastery)
& table_csv$username!='unknown',]
#CALCULANDO MÉDIA DE VIEWS DOS PROJETOS
mediana_Views = median(table_csv$totalVies, na.rm = TRUE)
mediana_Love = median(table_csv$totalLoves, na.rm = TRUE)
#SELEÇÃO DOS PROJETOS ABAIXO E ACIMA DA MEDIANA
#seleção em TOTAL VIEWS
butt_Views <- table_csv[which(table_csv$totalVies <= mediana_Views),]
top_Views <- table_csv[which(table_csv$totalVies > mediana_Views),]
#seleção em TOTAL LOVES
butt_Loves <-table_csv[which(butt_Views$totalLoves <= mediana_Love),]
top_Loves <- table_csv[which(top_Views$totalLoves > mediana_Love),]
#EM GRUPOS RELACIONADOS Á VIEWS-----------------------------------------------------------------------------------
#WILCOX #wilcox, usado em conjuntos de amostras diferentes(corr, correlação entre atributos diferentes)
wilcox.test(butt_Views$Abstraction, top_Views$Abstraction)
wilcox.test(butt_Views$Parallelism, top_Views$Parallelism)
wilcox.test(butt_Views$Logic, top_Views$Logic)
wilcox.test(butt_Views$Synchronization, top_Views$Synchronization)
wilcox.test(butt_Views$FlowControl, top_Views$FlowControl)
wilcox.test(butt_Views$UserInteractivity, top_Views$UserInteractivity)
wilcox.test(butt_Views$Synchronization, top_Views$Synchronization)
wilcox.test(butt_Views$FlowControl, top_Views$FlowControl)
wilcox.test(butt_Views$FlowControl, top_Views$FlowControl)
wilcox.test(butt_Views$UserInteractivity, top_Views$UserInteractivity)
wilcox.test(butt_Views$DataRepresentation, top_Views$DataRepresentation)
wilcox.test(butt_Views$Mastery, top_Views$Mastery)
wilcox.test(butt_Views$Clones, top_Views$Clones)
wilcox.test(butt_Views$Mastery, top_Views$Mastery)
wilcox.test(butt_Views$CustomBlocks, top_Views$CustomBlocks)
wilcox.test(butt_Views$Mastery, top_Views$Mastery)
wilcox.test(butt_Views$CustomBlocks, top_Views$CustomBlocks)
wilcox.test(butt_Views$scriptRank, top_Views$scriptRank)
res <- cohens_d(butt_Views$Abstraction, top_Views$Abstraction)                #
res <- cohens_d(butt_Views$Parallelism, top_Views$Parallelism)                #
res <- cohens_d(butt_Views$Abstraction, top_Views$Abstraction)                #0.2010
res <- cohens_d(butt_Views$Logic, top_Views$Logic)                            #
res <- cohens_d(butt_Views$CustomBlocks, top_Views$CustomBlocks)              #
res <- cohens_d(butt_Views$CustomBlocks, top_Views$CustomBlocks)              #
res <- cohens_d(butt_Views$CustomBlocks, top_Views$CustomBlocks)              #
res <- cohens_d(butt_Views$Synchronization, top_Views$Synchronization)        #
res <- cohens_d(butt_Views$FlowControl, top_Views$FlowControl)                #
res <- cohens_d(butt_Views$UserInteractivity, top_Views$UserInteractivity)    #
res <- cohens_d(butt_Views$UserInteractivity, top_Views$UserInteractivity)    #
res <- cohens_d(butt_Views$UserInteractivity, top_Views$UserInteractivity)    #
res <- cohens_d(butt_Views$DataRepresentation, top_Views$DataRepresentation)  #
res <- cohens_d(butt_Views$Mastery, top_Views$Mastery)                        #
res <- cohens_d(butt_Views$CustomBlocks, top_Views$CustomBlocks)              #
res <- cohens_d(butt_Views$CustomBlocks, top_Views$CustomBlocks)              #
res <- cohens_d(butt_Views$CustomBlocks, top_Views$CustomBlocks)              #
res <- cohens_d(butt_Views$scriptRank, top_Views$scriptRank)                  #
res <- cohens_d(butt_Views$totalBlocks, top_Views$totalBlocks)                #
wilcox.test(butt_Loves$Abstraction, top_Loves$Abstraction)
wilcox.test(butt_Loves$Parallelism, top_Loves$Parallelism)
wilcox.test(butt_Loves$Logic, top_Loves$Logic)
wilcox.test(butt_Loves$Synchronization, top_Loves$Synchronization)
wilcox.test(butt_Loves$FlowControl, top_Loves$FlowControl)
wilcox.test(butt_Loves$UserInteractivity, top_Loves$UserInteractivity)
wilcox.test(butt_Loves$DataRepresentation, top_Loves$DataRepresentation)
wilcox.test(butt_Loves$Mastery, top_Loves$Mastery)
wilcox.test(butt_Loves$Clones, top_Loves$Clones)
wilcox.test(butt_Loves$Mastery, top_Loves$Mastery)
wilcox.test(butt_Loves$CustomBlocks, top_Loves$CustomBlocks)
wilcox.test(butt_Loves$scriptRank, top_Loves$scriptRank)
wilcox.test(butt_Loves$totalBlocks, top_Loves$totalBlocks)
#EM GRUPOS RELACIONADOS Á LOVES-----------------------------------------------------------------------------------
#WILCOX #wilcox, usado em conjuntos de amostras diferentes(corr, correlação entre atributos diferentes)
wilcox.test(butt_Loves$Abstraction, top_Loves$Abstraction)
#EM GRUPOS RELACIONADOS Á LOVES-----------------------------------------------------------------------------------
#WILCOX #wilcox, usado em conjuntos de amostras diferentes(corr, correlação entre atributos diferentes)
wilcox.test(butt_Loves$Abstraction, top_Loves$Abstraction)
wilcox.test(butt_Loves$Parallelism, top_Loves$Parallelism)
wilcox.test(butt_Loves$Logic, top_Loves$Logic)
wilcox.test(butt_Loves$Synchronization, top_Loves$Synchronization)              #
wilcox.test(butt_Loves$FlowControl, top_Loves$FlowControl)
wilcox.test(butt_Loves$UserInteractivity, top_Loves$UserInteractivity)
wilcox.test(butt_Loves$DataRepresentation, top_Loves$DataRepresentation)
wilcox.test(butt_Loves$Mastery, top_Loves$Mastery)
wilcox.test(butt_Loves$Mastery, top_Loves$Mastery)
wilcox.test(butt_Loves$Clones, top_Loves$Clones)
wilcox.test(butt_Loves$Mastery, top_Loves$Mastery)
wilcox.test(butt_Loves$CustomBlocks, top_Loves$CustomBlocks)
wilcox.test(butt_Loves$scriptRank, top_Loves$scriptRank)
wilcox.test(butt_Loves$totalBlocks, top_Loves$totalBlocks)
res <- cohens_d(butt_Loves$Abstraction, top_Loves$Abstraction)                #
res <- cohens_d(butt_Loves$Parallelism, top_Loves$Parallelism)                #
res <- cohens_d(butt_Loves$Logic, top_Loves$Logic)                            #
res <- cohens_d(butt_Loves$CustomBlocks, top_Loves$CustomBlocks)              #
res <- cohens_d(butt_Loves$Synchronization, top_Loves$Synchronization)        #
res <- cohens_d(butt_Loves$FlowControl, top_Loves$FlowControl)                #
res <- cohens_d(butt_Loves$UserInteractivity, top_Loves$UserInteractivity)    #
res <- cohens_d(butt_Loves$DataRepresentation, top_Loves$DataRepresentation)  #
res <- cohens_d(butt_Loves$Mastery, top_Loves$Mastery)                        #
res <- cohens_d(butt_Loves$CustomBlocks, top_Loves$CustomBlocks)              #
res <- cohens_d(butt_Loves$scriptRank, top_Loves$scriptRank)                  #
res <- cohens_d(butt_Loves$totalBlocks, top_Loves$totalBlocks)                #
cliff.delta(op_Views$Abstraction, butt_Views$Abstraction, return.dm=TRUE)
mean(butt_Views$Abstraction); mean(top_Views$Abstraction);
#CONFIGURANDO ÁREA DE TRABALHO E INCLUSÃO DE BIBLIOTECAS
setwd("~/GitHub/AnaliseDosProjetosScratch_Empirica/Atividade")
#IMPORTANTO BASE DE DADOS
table_csv <- read.delim("new_Data.csv")
#FUNÇÕES AUXILIARES
cohens_d <- function(x, y) {
lx <- length(x)- 1
ly <- length(y)- 1
md  <- abs(mean(x) - mean(y))
csd <- lx * var(x) + ly * var(y)
csd <- csd/(lx + ly)
csd <- sqrt(csd)
cd  <- md/csd
}
#TRATANDO OS DADOS
table_csv <- table_csv[!is.na(table_csv$Abstraction)
& !is.na(table_csv$Parallelism)
& !is.na(table_csv$Logic)
& !is.na(table_csv$Synchronization)
& !is.na(table_csv$FlowControl)
& !is.na(table_csv$UserInteractivity)
& !is.na(table_csv$DataRepresentation)
& !is.na(table_csv$Mastery)
& table_csv$username!='unknown',]
#CALCULANDO MÉDIA DE VIEWS DOS PROJETOS
mediana_Views = median(table_csv$totalVies, na.rm = TRUE)
mediana_Love = median(table_csv$totalLoves, na.rm = TRUE)
#SELEÇÃO DOS PROJETOS ABAIXO E ACIMA DA MEDIANA
#seleção em TOTAL VIEWS
butt_Views <- table_csv[which(table_csv$totalVies <= mediana_Views),]
top_Views <- table_csv[which(table_csv$totalVies > mediana_Views),]
#seleção em TOTAL LOVES
butt_Loves <-table_csv[which(butt_Views$totalLoves <= mediana_Love),]
top_Loves <- table_csv[which(top_Views$totalLoves > mediana_Love),]
#CONFIGURANDO ÁREA DE TRABALHO E INCLUSÃO DE BIBLIOTECAS
setwd("~/GitHub/AnaliseDosProjetosScratch_Empirica/Atividade")
#IMPORTANTO BASE DE DADOS
table_csv <- read.delim("new_Data.csv")
#FUNÇÕES AUXILIARES
cohens_d <- function(x, y) {
lx <- length(x)- 1
ly <- length(y)- 1
md  <- abs(mean(x) - mean(y))
csd <- lx * var(x) + ly * var(y)
csd <- csd/(lx + ly)
csd <- sqrt(csd)
cd  <- md/csd
}
#TRATANDO OS DADOS
table_csv <- table_csv[!is.na(table_csv$Abstraction)
& !is.na(table_csv$Parallelism)
& !is.na(table_csv$Logic)
& !is.na(table_csv$Synchronization)
& !is.na(table_csv$FlowControl)
& !is.na(table_csv$UserInteractivity)
& !is.na(table_csv$DataRepresentation)
& !is.na(table_csv$Mastery)
& table_csv$username!='unknown',]
#CALCULANDO MÉDIA DE VIEWS DOS PROJETOS
mediana_Views = median(table_csv$totalVies, na.rm = TRUE)
mediana_Love = median(table_csv$totalLoves, na.rm = TRUE)
#SELEÇÃO DOS PROJETOS ABAIXO E ACIMA DA MEDIANA
#seleção em TOTAL VIEWS
butt_Views <- table_csv[which(table_csv$totalVies <= mediana_Views),]
top_Views <- table_csv[which(table_csv$totalVies > mediana_Views),]
#seleção em TOTAL LOVES
butt_Loves <-table_csv[which(butt_Views$totalLoves <= mediana_Love),]
top_Loves <- table_csv[which(top_Views$totalLoves > mediana_Love),]
res <- cohens_d(butt_Views$Abstraction, top_Views$Abstraction)                #0.2010
res <- cohens_d(butt_Views$Parallelism, top_Views$Parallelism)                #0.2381
res <- cohens_d(butt_Views$Logic, top_Views$Logic)                            #0.1232
res <- cohens_d(butt_Views$CustomBlocks, top_Views$CustomBlocks)              #0.0406
res <- cohens_d(butt_Views$Synchronization, top_Views$Synchronization)        #0.1514
res <- cohens_d(butt_Views$FlowControl, top_Views$FlowControl)                #0.1947
res <- cohens_d(butt_Views$UserInteractivity, top_Views$UserInteractivity)    #0.0260
res <- cohens_d(butt_Views$DataRepresentation, top_Views$DataRepresentation)  #0.0644
res <- cohens_d(butt_Views$Mastery, top_Views$Mastery)                        #0.1853
res <- cohens_d(butt_Views$CustomBlocks, top_Views$CustomBlocks)              #0.0406
res <- cohens_d(butt_Views$scriptRank, top_Views$scriptRank)                  #0.1079
res <- cohens_d(butt_Views$totalBlocks, top_Views$totalBlocks)                #0.0333
package.load(effsize)
library("effsize")
library("effsize")
cliff.delta(op_Views$Abstraction, butt_Views$Abstraction, return.dm=TRUE)
cliff.delta(butt_Loves$Abstraction, top_Loves$Abstraction)
